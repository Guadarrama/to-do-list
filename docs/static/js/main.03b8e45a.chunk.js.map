{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ToDoCard","props","useState","name","setName","isComplete","setComplete","items","setItems","toggleComplete","i","console","log","tempItems","className","map","item","key","type","onClick","e","checked","splice","remove","onSubmit","preventDefault","push","onChange","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qMAKMA,EAAW,SAAAC,GAAU,IAAD,EAEAC,mBAAS,IAFT,mBAEjBC,EAFiB,KAEXC,EAFW,OAGUF,oBAAS,GAHnB,mBAGjBG,EAHiB,KAGLC,EAHK,OAIEJ,mBAAS,IAJX,mBAIjBK,EAJiB,KAIVC,EAJU,KAsBlBC,EAAiB,SAAAC,GACrBC,QAAQC,IAAIF,GACZ,IAAIG,EAAS,YAAON,GACpBM,EAAUH,GAAGL,YAAeE,EAAMG,GAAGL,WACrCG,EAASK,GACTF,QAAQC,IAAIL,EAAMG,GAAGL,aAGvB,OACI,yBAAKS,UAAU,aACb,wBAAIA,UAAU,eAAd,cAEIP,EAAMQ,KAAI,SAACC,EAAMN,GAAP,OACR,yBAAKO,IAAKP,EAAGI,UAAU,uBACrB,yBAAKA,UAAU,kBACXE,EAAKX,WACL,6BAAK,gCAASW,EAAKb,KAAd,MAEL,6BAAMa,EAAKb,OAGf,yBAAKW,UAAU,sBACXE,EAAKX,WACL,2BACEa,KAAK,WACLC,QAAU,SAAAC,GAAC,OAAIX,EAAeC,IAC9BW,SAAO,IAGT,2BACEH,KAAK,WACLC,QAAU,SAAAC,GAAC,OAAIX,EAAeC,MAVpC,OAeE,4BAAQS,QAAU,SAAAC,GAAC,OA3CpB,SAAAV,GACbC,QAAQC,IAAIF,GACZ,IAAIG,EAAS,YAAON,GACpBM,EAAUS,OAAOZ,EAAG,GACpBF,EAASK,GAuC4BU,CAAOb,IAAII,UAAU,0BAA5C,eAMZ,6BACA,6BACE,0BAAMU,SA5DW,SAAAJ,GACrBA,EAAEK,iBACF,IAAIZ,EAAS,YAAON,GACpBM,EAAUa,KAAK,CAACvB,KAAMA,EAAME,WAAWA,IACvCG,EAASK,GACTT,EAAQ,IACRE,GAAY,IAsD0BQ,UAAU,mCAC1C,2BAAOA,UAAU,kBAAjB,SACA,2BACEI,KAAK,OACLS,SAAW,SAAAP,GAAC,OAAIhB,EAAQgB,EAAEQ,OAAOC,QACjCA,MAAO1B,IALX,OAQE,2BAAOe,KAAK,SAASW,MAAM,MAAMf,UAAU,6BAetCgB,MANf,WACE,OACE,kBAAC,EAAD,OC9EgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.03b8e45a.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\n//persist the to-dos list on page refreshes:\n//consider combining the browser's localStorage with the useEffect hook\nconst ToDoCard = props => {\n\n  const [name, setName] = useState(\"\");\n  const [isComplete, setComplete] = useState(false);\n  const [items, setItems] = useState([]);\n\n  const addNinjaToList = e =>{\n    e.preventDefault();\n    let tempItems = [...items];\n    tempItems.push({name: name, isComplete:isComplete});\n    setItems(tempItems);\n    setName(\"\");\n    setComplete(false);\n  }\n\n  const remove = i =>{\n    console.log(i);\n    let tempItems = [...items]\n    tempItems.splice(i, 1);\n    setItems(tempItems);\n  }\n\n  const toggleComplete = i =>{\n    console.log(i);\n    let tempItems = [...items];\n    tempItems[i].isComplete = !(items[i].isComplete);\n    setItems(tempItems);\n    console.log(items[i].isComplete);\n  }\n\n  return( \n      <div className=\"container\">\n        <h3 className=\"text-center\">To Do List</h3>\n          {\n            items.map((item, i) =>\n              <div key={i} className=\"bg-light text-right\">\n                <div className=\"d-inline-block\">\n                  {(item.isComplete) ?\n                    <div><strike>{item.name} </strike></div>\n                    :\n                    <div>{item.name}</div>\n                  }\n                </div>\n                <div className=\"d-inline-block p-2\">\n                  {(item.isComplete) ?\n                    <input\n                      type=\"checkbox\" \n                      onClick={ e => toggleComplete(i)}\n                      checked\n                    />                  \n                    :\n                    <input\n                      type=\"checkbox\" \n                      onClick={ e => toggleComplete(i)}\n                    />                    \n                  }\n                  &nbsp;\n\n                  <button onClick={ e => remove(i)} className=\"btn btn-outline-danger\">Delete</button>\n                </div>\n              </div>\n            )\n          }  \n\n      <hr/>\n      <div>\n        <form onSubmit={ addNinjaToList } className=\"form-row justify-content-center\">\n          <label className=\"col-form-label\">To Do</label>\n          <input\n            type=\"text\"\n            onChange={ e => setName(e.target.value)}\n            value={name} \n          />\n          &nbsp;\n          <input type=\"submit\" value=\"Add\" className=\"btn btn-outline-info\"/>\n        </form>\n      </div>\n\n    </div> \n\n  );\n}\n\nfunction App() {\n  return (\n    <ToDoCard />\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}